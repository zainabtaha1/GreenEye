// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace greenEyeProject.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250904113856_RemovePasswordHash")]
    partial class RemovePasswordHash
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("greenEyeProject.Models.AIAnalysis", b =>
                {
                    b.Property<int>("AnalysisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnalysisId"));

                    b.Property<DateTime>("AnalyzedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<decimal>("RiskPrediction")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnalysisId");

                    b.HasIndex("LocationId");

                    b.ToTable("Analyses");
                });

            modelBuilder.Entity("greenEyeProject.Models.ClimateData", b =>
                {
                    b.Property<int>("ClimateDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClimateDataId"));

                    b.Property<DateTime>("CollectedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Humidity")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<decimal>("Rainfall")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Temperature")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("ClimateDataId");

                    b.HasIndex("LocationId");

                    b.ToTable("ClimateData");
                });

            modelBuilder.Entity("greenEyeProject.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("greenEyeProject.Models.Recommendation", b =>
                {
                    b.Property<int>("RecommendationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecommendationId"));

                    b.Property<int>("AnalysisId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CropType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LandUseStrategy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecommendationId");

                    b.HasIndex("AnalysisId");

                    b.ToTable("Recommendations");
                });

            modelBuilder.Entity("greenEyeProject.Models.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<DateTime>("GeneratedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId1")
                        .HasColumnType("int");

                    b.Property<string>("ReportUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("ReportId");

                    b.HasIndex("LocationId");

                    b.HasIndex("LocationId1");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("greenEyeProject.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("greenEyeProject.Models.SatelliteData", b =>
                {
                    b.Property<int>("SatelliteDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SatelliteDataId"));

                    b.Property<DateTime>("CapturedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<decimal>("NDVI")
                        .HasPrecision(5, 3)
                        .HasColumnType("decimal(5,3)");

                    b.HasKey("SatelliteDataId");

                    b.HasIndex("LocationId");

                    b.ToTable("SatelliteData");
                });

            modelBuilder.Entity("greenEyeProject.Models.SoilData", b =>
                {
                    b.Property<int>("SoilDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SoilDataId"));

                    b.Property<decimal>("Carbon")
                        .HasPrecision(8, 3)
                        .HasColumnType("decimal(8,3)");

                    b.Property<DateTime>("CollectedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<decimal>("Salinity")
                        .HasPrecision(8, 3)
                        .HasColumnType("decimal(8,3)");

                    b.Property<string>("Texture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("pH")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)");

                    b.HasKey("SoilDataId");

                    b.HasIndex("LocationId");

                    b.ToTable("SoilData");
                });

            modelBuilder.Entity("greenEyeProject.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedAt = new DateTime(2025, 9, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@greeneye.com",
                            Location = "Head Office",
                            Name = "System Admin",
                            PasswordHash = "Admin@123",
                            PhoneNumber = "01016943529",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("greenEyeProject.Models.AIAnalysis", b =>
                {
                    b.HasOne("greenEyeProject.Models.Location", "Location")
                        .WithMany("Analyses")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("greenEyeProject.Models.ClimateData", b =>
                {
                    b.HasOne("greenEyeProject.Models.Location", "Location")
                        .WithMany("ClimateData")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("greenEyeProject.Models.Location", b =>
                {
                    b.HasOne("greenEyeProject.Models.User", "User")
                        .WithMany("Locations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("greenEyeProject.Models.Recommendation", b =>
                {
                    b.HasOne("greenEyeProject.Models.AIAnalysis", "Analysis")
                        .WithMany("Recommendations")
                        .HasForeignKey("AnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Analysis");
                });

            modelBuilder.Entity("greenEyeProject.Models.Report", b =>
                {
                    b.HasOne("greenEyeProject.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("greenEyeProject.Models.Location", null)
                        .WithMany("Reports")
                        .HasForeignKey("LocationId1");

                    b.HasOne("greenEyeProject.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("greenEyeProject.Models.User", null)
                        .WithMany("Reports")
                        .HasForeignKey("UserId1");

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("greenEyeProject.Models.SatelliteData", b =>
                {
                    b.HasOne("greenEyeProject.Models.Location", "Location")
                        .WithMany("SatelliteData")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("greenEyeProject.Models.SoilData", b =>
                {
                    b.HasOne("greenEyeProject.Models.Location", "Location")
                        .WithMany("SoilData")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("greenEyeProject.Models.User", b =>
                {
                    b.HasOne("greenEyeProject.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("greenEyeProject.Models.AIAnalysis", b =>
                {
                    b.Navigation("Recommendations");
                });

            modelBuilder.Entity("greenEyeProject.Models.Location", b =>
                {
                    b.Navigation("Analyses");

                    b.Navigation("ClimateData");

                    b.Navigation("Reports");

                    b.Navigation("SatelliteData");

                    b.Navigation("SoilData");
                });

            modelBuilder.Entity("greenEyeProject.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("greenEyeProject.Models.User", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("Reports");
                });
#pragma warning restore 612, 618
        }
    }
}
